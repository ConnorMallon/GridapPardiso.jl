var documenterSearchIndex = {"docs":
[{"location":"#GridapPardiso.jl-1","page":"Home","title":"GridapPardiso.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [GridapPardiso]","category":"page"},{"location":"#GridapPardiso.PardisoSolver","page":"Home","title":"GridapPardiso.PardisoSolver","text":"struct PardisoSolver{Ti} <: LinearSolver\n\nGridap LinearSolver implementation for Intel Pardiso MKL solver. Official Intel Pardiso MKL documentation: https://software.intel.com/en-us/mkl-developer-reference-fortran-intel-mkl-pardiso-parallel-direct-sparse-solver-interface\n\n\n\n\n\n","category":"type"},{"location":"#GridapPardiso.PardisoSolver-Tuple{Any,Any,Any}","page":"Home","title":"GridapPardiso.PardisoSolver","text":"functionPardisoSolver(mtype, iparm, msglvl)\n\nPardisoSolver constructor overloading with default values. Returns a PardisoSolver given its matrix type, Pardiso parameters and verbosity.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.PardisoSolver-Tuple{Any,Any}","page":"Home","title":"GridapPardiso.PardisoSolver","text":"function PardisoSolver(mtype, iparm)\n\nPardisoSolver constructor overloading with default values. Returns a PardisoSolver given its matrix type and Pardiso parameters.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.PardisoSolver-Tuple{Any}","page":"Home","title":"GridapPardiso.PardisoSolver","text":"function PardisoSolver(mtype)\n\nPardisoSolver constructor overloading with default values. Returns a PardisoSolver given its matrix type.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.PardisoSolver-Tuple{}","page":"Home","title":"GridapPardiso.PardisoSolver","text":"function PardisoSolver()\n\nPardisoSolver constructor overloading with default values. Returns a PardisoSolver.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.PardisoNumericalSetup","page":"Home","title":"GridapPardiso.PardisoNumericalSetup","text":"mutable struct PardisoNumericalSetup{T,Ti} <: NumericalSetup\n\nGridap NumericalSetup implementation for Intel Pardiso MKL solver.\n\n\n\n\n\n","category":"type"},{"location":"#GridapPardiso.PardisoSymbolicSetup","page":"Home","title":"GridapPardiso.PardisoSymbolicSetup","text":"mutable struct PardisoSymbolicSetup{T,Ti} <: SymbolicSetup\n\nGridap SymbolicSetup implementation for Intel Pardiso MKL solver.\n\n\n\n\n\n","category":"type"},{"location":"#Gridap.LinearSolvers.numerical_setup!-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoNumericalSetup{T,Ti},SparseMatrixCSC{T,Ti}}} where Ti<:Int64 where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.numerical_setup!","text":"function numerical_setup!(pns::PardisoNumericalSetup{T,Ti}, mat::SparseMatrixCSC{T,Ti}) where {T<:Float64,Ti<:Int64}\n\nGridap numerical_setup overload. Use Intel Pardiso MKL to perform the numerical factorization phase.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.numerical_setup-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoSymbolicSetup{T,Ti},AbstractArray{T,2}}} where Ti<:Integer where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.numerical_setup","text":"function numerical_setup(pss::PardisoSymbolicSetup{T,Ti}, mat::AbstractMatrix{T}) where {T<:Float64,Ti<:Integer}\n\nGridap numericalsetup overload. Converts any input AbstractMatrix{T} in SparseMatrixCSC{T,Ti} and calls `numericalsetup(ps::PardisoSymbolicSetup{Ti}, mat::SparseMatrixCSC{T,Ti})`.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.numerical_setup-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoSymbolicSetup{T,Ti},SparseMatrixCSC{T,Ti}}} where Ti<:Integer where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.numerical_setup","text":"function numerical_setup(pss::PardisoSymbolicSetup{T,Ti}, mat::SparseMatrixCSC{T,Ti}) where {T<:Float64,Ti<:Integer}\n\nGridap numerical_setup overload. Create the PardisoSymbolicSetup object and use Intel Pardiso MKL to perform the numerical factorization phase.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.solve!-Union{Tuple{Ti}, Tuple{T}, Tuple{AbstractArray{T,1},PardisoNumericalSetup{T,Ti},AbstractArray{T,1}}} where Ti<:Int32 where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.solve!","text":"function solve!(x::AbstractVector{T}, ns::PardisoNumericalSetup{T,Ti}, b::AbstractVector{T}) where {T<:Float64,Ti<:Int32}\n\nGridap solve! method overload. Use Intel Pardiso MKL to perform the solve iterative refinement phase.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.solve!-Union{Tuple{Ti}, Tuple{T}, Tuple{AbstractArray{T,1},PardisoNumericalSetup{T,Ti},AbstractArray{T,1}}} where Ti<:Int64 where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.solve!","text":"function solve!(x::AbstractVector{T}, ns::PardisoNumericalSetup{T,Ti}, b::AbstractVector{T}) where {T<:Float64,Ti<:Int64}\n\nGridap solve! method overload. Use Intel Pardiso MKL to perform the solve iterative refinement phase.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.symbolic_setup-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoSolver{Ti},AbstractArray{T,2}}} where Ti<:Integer where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.symbolic_setup","text":"function symbolic_setup(ps::PardisoSolver{Ti}, mat::AbstractMatrix{T}) where {T<:Float64,Ti<:Integer}\n\nGridap symbolicsetup overload. Converts any input AbstractMatrix{T} in SparseMatrixCSC{T,Ti} and calls `symbolicsetup(ps::PardisoSolver{Ti}, mat::SparseMatrixCSC{T,Ti})`.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.symbolic_setup-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoSolver{Ti},SparseMatrixCSC{T,Ti}}} where Ti<:Int32 where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.symbolic_setup","text":"function symbolic_setup(ps::PardisoSolver{Ti}, mat::SparseMatrixCSC{T,Ti}) where {T<:Float64,Ti<:Int32}\n\nGridap symbolic_setup overload. Use Intel Pardiso MKL to perform the analisys phase.\n\n\n\n\n\n","category":"method"},{"location":"#Gridap.LinearSolvers.symbolic_setup-Union{Tuple{Ti}, Tuple{T}, Tuple{PardisoSolver{Ti},SparseMatrixCSC{T,Ti}}} where Ti<:Int64 where T<:Float64","page":"Home","title":"Gridap.LinearSolvers.symbolic_setup","text":"function symbolic_setup(ps::PardisoSolver{Ti}, mat::SparseMatrixCSC{T,Ti}) where {T<:Float64,Ti<:Int64}\n\nGridap symbolic_setup overload. Use Intel Pardiso MKL to perform the analisys phase.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.numerical_setup_finalize!-Union{Tuple{PardisoNumericalSetup{T,Ti}}, Tuple{Ti}, Tuple{T}} where Ti<:Int32 where T","page":"Home","title":"GridapPardiso.numerical_setup_finalize!","text":"function numerical_setup_finalize(pss::PardisoNumericalSetup{T,Ti}) where {T,Ti<:Int32}\n\nFinalization of PardisoNumericalSetup{T,Ti} object. Release internal Pardiso memory.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.numerical_setup_finalize!-Union{Tuple{PardisoNumericalSetup{T,Ti}}, Tuple{Ti}, Tuple{T}} where Ti<:Int64 where T","page":"Home","title":"GridapPardiso.numerical_setup_finalize!","text":"function numerical_setup_finalize(pss::PardisoNumericalSetup{T,Ti}) where {T,Ti<:Int64}\n\nFinalization of PardisoNumericalSetup{T,Ti} object. Release internal Pardiso memory.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.pardiso_report_error-Tuple{Int64}","page":"Home","title":"GridapPardiso.pardiso_report_error","text":"pardiso_report_error(code::Int)\n\nReport Pardiso error given its code.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.symbolic_setup_finalize-Union{Tuple{PardisoSymbolicSetup{T,Ti}}, Tuple{Ti}, Tuple{T}} where Ti<:Int32 where T","page":"Home","title":"GridapPardiso.symbolic_setup_finalize","text":"function symbolic_setup_finalize(pss::PardisoSymbolicSetup{T,Ti}) where {T,Ti<:Int32}\n\nFinalization of PardisoSymbolicSetup{T,Ti} object. Release internal Pardiso memory.\n\n\n\n\n\n","category":"method"},{"location":"#GridapPardiso.symbolic_setup_finalize-Union{Tuple{PardisoSymbolicSetup{T,Ti}}, Tuple{Ti}, Tuple{T}} where Ti<:Int64 where T","page":"Home","title":"GridapPardiso.symbolic_setup_finalize","text":"function symbolic_setup_finalize(pss::PardisoSymbolicSetup{T,Ti}) where {T,Ti<:Int64}\n\nFinalization of PardisoSymbolicSetup{T,Ti} object. Release internal Pardiso memory.\n\n\n\n\n\n","category":"method"}]
}
